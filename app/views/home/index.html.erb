<div class="hero-unit">
  <div style="hero-unit-content">
    <h1 class="hero_title">Buy and sell instantly.</h1>
    <br/>
    <p class="hero_info">
      We buy products for honey. You buy anything using honey.
    </p>
    <p class="hero_info">
      It's never been so easy to buy and sell.
    </p>
  </div>

  <div id="buttons">
  <!--<a class="modern socle" href="#">Sell Now</a>-->
    <a href="#" id="button_sell" class="modern socle sell_now">Sell Now</a>
    <a href="#" id="button_buy" class="modern socle buy_now">Buy Now</a>
  </div>
</div>
<div id="product_type" style="display:none;">
  <h2 style="color:#38B4DE;">Choose your product:</h2>
  <div id="product_type_container" class="span12">
    <% Category.all.each do |category| %>
      <div id="cat_<%= category.id %>" class="category span4"><img class="cat_item" alt="<%= category.title %>" src="<%= category.image_url(:medium) %>"></div>
    <% end %>
  </div>
</div>

<% Category.all.each do |category| %>
  <div id="container_cat_<%= category.id %>" class="product_search_container" style="display:none; padding-top: 40px;">
    <div id="product_models">
      <div class="model_filter">
        <span class="product_model active label" id="filter_model_all">All models</span>
        <% category.product_models.each do |product_model| %>
          &nbsp;|&nbsp;<span class="product_model label label-important" id="filter_model_<%= product_model.id %>"><%= product_model.title %></span>
        <% end %>
      </div>
    </div>
    <div id="search_container">
      <div class="attribute_filter">
        <% category.category_attributes.each do |attr|%>
          <div class="option-set" data-group="cat_attr_<%= attr.id %>">
            <h3 class="s_category" style="color:#38B4DE"><%= attr.title %></h3>
            <% attr.attributes_in_models.each do |attr_value_with_models| %>
              <div style="display: inline-block; line-height: 30px;" class="attr_filter attr_filter_model_all <%= attr_value_with_models[1].map{|model| "attr_filter_model_#{model.id.to_s}"}.join(" ") %>" >
                <input type="checkbox" id="checkbox-<%= attr.id %>-<%= attr_value_with_models[0] %>" class="regular-checkbox big-checkbox"
                    attr-filter-option='<%= attr_value_with_models[0] %>' />
                <label for="checkbox-<%= attr.id %>-<%= attr_value_with_models[0] %>"></label>
              </div>
              <div style="display:inline-block; margin-top: -5px; font-size: 20px; padding-right: 15px;"><%= attr_value_with_models[0] %></div>
            <% end %>
          </div>
        <% end %>
        <div class="option-set" data-group="cat_attr_condition" style="">
          <h3 class="s_category">Using conditions</h3>
          <% Product::USING_CONDITIONS.keys.each do |condition| %>
            <div style="display: inline-block; line-height: 30px;" >
              <input type="checkbox" class="regular-checkbox big-checkbox" id="checkbox-cond-<%= condition.to_s %>" 
                attr-filter-option="<%= condition.to_s %>" />
              <label for="checkbox-cond-<%= condition.to_s %>"></label>
            </div>
            <div style="display:inline-block; margin-top: -5px; font-size: 20px; padding-right: 15px;"><%= Product::USING_CONDITIONS[condition] %></div>
          <% end %>
        </div>
      </div>
    </div>
    <div class="product_container" style="display:none;">
      <div id="products" class="isotope thumbnail" style="position: relative; overflow: hidden; min-height: 200px; width:500px;">
        <% category.products.each do |product| %>
          <%= render :partial => "/home/product_thumbnail.html", :locals => {:product => product} %>
        <% end %>
      </div>
    </div>
  </div>
<% end %>

<script language="JavaScript">
  function get_filter_options() {
    var filters = {};
    
    $("#container_" + current_category_id + ' .attribute_filter input').each(function(index) {
      var $src = $(this);
      if(!$src.parent().hasClass("hidden") && $src.is(':checked')){
        var group = $src.parents(".option-set").attr("data-group");
        if ( !filters[ group ] ) {
          filters[ group ] = [];
        }
        filters[ group ].push('.' + $src.attr("attr-filter-option"));
      }
    });
    
    filters['product_mode'] = []
    if(current_model_id == "filter_model_all"){
      filters['product_mode'].push('.item');
    }else{
      filters['product_mode'].push('.product_' + current_model_id );
    }

    var i = 0;
    var comboFilters = [];

    for ( var prop in filters ) {
      //message.push( filters[ prop ].join(' ') );
      var filterGroup = filters[ prop ];
      // skip to next filter group if it doesn't have any values
      if ( !filterGroup.length ) {
        continue;
      }
      if ( i === 0 ) {
        // copy to new array
        comboFilters = filterGroup;
      } else {
        var filterSelectors = [];
        // copy to fresh array
        var groupCombo = comboFilters; // [ A, B ]
        // merge filter Groups
        for (var k=0, len3 = filterGroup.length; k < len3; k++) {
          for (var j=0, len2 = groupCombo.length; j < len2; j++) {
            filterSelectors.push( groupCombo[j] + filterGroup[k] ); // [ 1, 2 ]
          }
          
        }
        // apply filter selectors to combo filters for next group
        comboFilters = filterSelectors
      }
      i++
    }
    //alert(comboFilters);
    return comboFilters;
  }
     
  $('#buttons a').click(function() {
    if($(this).attr('id') == "button_sell"){
      showScreenToSell()
    }else{
      showScreenToBuy();
    }
    $('div#product_type').fadeIn(600);
    $.scrollTo($('div#product_type'), 400);
  });
  
  var current_category_id = "";
  var current_model_id = "filter_model_all";

  $('#product_type .cat_item').live('click', function() {
     
     if(current_category_id == $(this).parent().attr("id")){
       return;
     }
     
     if(current_category_id != "") {
       $("#container_" + current_category_id).hide();
       $("#" + current_category_id).removeClass("select").addClass("blur");
     }
     
     current_category_id = $(this).parent().attr("id");
     $("#" + current_category_id).addClass("select");

     $("#container_" + current_category_id).fadeIn(600);
     $.scrollTo($("#container_" + current_category_id), 300);
     showIsoTope();
  });
  
  $('.product_search_container .product_model').live('click', function() {
     $("#container_" + current_category_id + " .attr_filter").addClass("hidden");
     $("#container_" + current_category_id + " .product_model").removeClass("active");
     
     current_model_id = $(this).attr("id");
     $("#container_" + current_category_id + " .attr_" + current_model_id).removeClass("hidden");
     $("#container_" + current_category_id + " #" + current_model_id).addClass("active");
     showIsoTope();
  });

  $('.product_search_container input').live('change', function() {
     showIsoTope();
  });
  
  function showIsoTope(){
    $("#container_" + current_category_id + ' .product_container').fadeIn(600);
    //$.scrollTo($("#container_" + current_category_id + ' #product_models'), 400);
    comboFilters = get_filter_options();
    $("#container_" + current_category_id + ' #products').isotope({ filter: comboFilters.join(', ') });
  }
   
  var $container = $('#product_type_container'),
  $articles = $container.children('.category'), timeout;
   
  $articles.on( 'mouseenter', function( event ) {
      var $article = $(this);
      clearTimeout( timeout );
      timeout = setTimeout( function() {
          if( $article.hasClass('active') ) return false;
          $article.removeClass('blur').addClass('active');
          $articles.not($article).removeClass('active').addClass('blur');
          if(current_category_id == "") return false;
          $("#" + current_category_id).removeClass('blur').addClass("select");
      }, 75 );
  });
  
  $articles.on( 'mouseleave', function( event ) {
      var $article = $(this);
      $article.removeClass('active blur');
  });
   
  $container.on( 'mouseleave', function( event ) {
      clearTimeout( timeout );
      $articles.removeClass('active blur');
      if(current_category_id == "") return false;
      $articles.addClass('blur');
      $("#" + current_category_id).removeClass('blur').addClass("select");
  });

  jQuery(window).load(function(){
//    $('#product #container').isotope({ filter: '.none' });
//    centerIsotypeImages();
  });
  
  function showScreenToBuy() {
    $(".thumbnail .box .button_for_buy").show();
    $(".thumbnail .box .button_for_sell").hide();
  }
  function showScreenToSell() {
    $(".thumbnail .box .button_for_buy").hide();
    $(".thumbnail .box .button_for_sell").show();
  }
  
  function centerIsotypeImages(){
    jQuery('#product #container .item').each(function(){
      var $this = jQuery(this);
      if($this.find('img').get(0) === undefined){ return; }
      var cont_ratio = $this.width() / $this.height();
      var img_ratio = $this.find('img').get(0).width / $this.find('img').get(0).height;

      if(cont_ratio <= img_ratio){
        $this.find('img').css({ 'width' : 'auto', 'height' : '100%', 'top' : 0 }).css({ 'left' : ~(($this.find('img').width()-$this.width())/2)+1 });
        $this.find('img').stop(true, true).fadeIn(200);
      }else{
        $this.find('img').css({ 'width' : '100%', 'height' : 'auto', 'left' : 0 }).css({ 'top' : ~(($this.find('img').height()-$this.height())/2)+1 });
        $this.find('img').stop(true, true).fadeIn(200);
      }
    });
  }

</script>